# Lets store all our function at one place 

# include setup script
. /tmp/ci/setup

# send notification or files on telegraph 
tg () {
curl -s "https://api.telegram.org/bot${bot_api}/sendmessage" --data "text=$1&chat_id=${chat_id}"
}

# Compress function with pigz for faster compression
com () {
tar --use-compress-program="pigz -k -$2 " -cf $1.tar.gz $1
}

# install apt 
install_apt () {
curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
apt update && apt install wget pigz gh
}

# upload rom
up () {
echo $gh_token > mytoken.txt # login in github
gh auth login --with-token < mytoken.txt
gh release create $rom --generate-notes --repo $upload_rom # create a release tag
gh release upload --clobber $rom $1 --repo $upload_rom
echo "Link: $repo_link/releases/download/$rom/$1"
}

# check Build Number
git show -s --format=%s > last_commit_name # store last commit name
awk 'NF>1{print $NF}' last_commit_name > last_digit.txt # store last digit which is our build number
build_no="`cat last_digit.txt`" # store build number
if [ $build_no != '^[0-9]+$' ]; then # at first build we haven't stored any digit in commit name
	build_no=0 # so lets use 0 as it is going to become 1 while committing
fi
new_build_no=$(($build_no + 1))
rm -rf last_* # clean up xD

# download ccache
download_ccache () {
echo "cloning $gitlab_repo"
git clone --depth=1 $gitlab_repo $rom
}

# upload ccache
upload_ccache () {
rm -rf README.md
git add -f -A .
git commit -m "$rom: save cache part no: $build_no"
git push https://oauth2:$gitlab_token@gitlab.com/$lab_username/$lab_reponame.git -f # force push let's goooooo
}

# done